import React, { useState } from 'react';

type Ingredient = {
  name: string;
  id: string;
};

type DietaryPreference = {
  label: string;
  value: string;
  selected: boolean;
};

export const RecipeGenerator = () => {
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [recipe, setRecipe] = useState(null);
  
  const [dietaryPreferences, setDietaryPreferences] = useState<DietaryPreference[]>([
    { label: 'Vegetarian', value: 'vegetarian', selected: false },
    { label: 'Vegan', value: 'vegan', selected: false },
    { label: 'Gluten-Free', value: 'gluten-free', selected: false },
    { label: 'Dairy-Free', value: 'dairy-free', selected: false },
    { label: 'Keto', value: 'keto', selected: false },
    { label: 'Low-Carb', value: 'low-carb', selected: false },
  ]);

  const handleAddIngredient = () => {
    if (inputValue.trim() !== '') {
      setIngredients([
        ...ingredients, 
        { name: inputValue.trim(), id: Math.random().toString(36).substr(2, 9) }
      ]);
      setInputValue('');
    }
  };

  const handleRemoveIngredient = (id: string) => {
    setIngredients(ingredients.filter(ingredient => ingredient.id !== id));
  };

  const toggleDietaryPreference = (value: string) => {
    setDietaryPreferences(dietaryPreferences.map(pref => 
      pref.value === value ? { ...pref, selected: !pref.selected } : pref
    ));
  };

  const handleGenerateRecipe = () => {
    if (ingredients.length === 0) {
      alert('Please add at least one ingredient');
      return;
    }

    setIsGenerating(true);
    
    // This would be replaced with an actual API call in production
    setTimeout(() => {
      setIsGenerating(false);
      // Mock recipe result - would come from the API
      setRecipe({
        title: 'Placeholder Recipe',
        description: 'This is a placeholder recipe that would be generated by our AI.',
        ingredients: ingredients.map(ing => ing.name),
        instructions: ['Step 1: Do something', 'Step 2: Do something else', 'Step 3: Enjoy!'],
        nutrition: { calories: 350, protein: 15, fat: 12, carbs: 45 }
      });
    }, 2000);
  };

  return (
    <div className="max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-8 text-center text-gray-800">Generate Your Recipe</h1>
      
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-xl font-semibold mb-4">What ingredients do you have?</h2>
        
        <div className="flex mb-4">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleAddIngredient()}
            className="flex-grow p-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-green-500"
            placeholder="Enter an ingredient..."
          />
          <button 
            onClick={handleAddIngredient}
            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-r-lg"
          >
            Add
          </button>
        </div>
        
        <div className="flex flex-wrap gap-2 mb-6">
          {ingredients.map((ingredient) => (
            <div key={ingredient.id} className="bg-gray-100 px-3 py-1 rounded-full flex items-center">
              <span>{ingredient.name}</span>
              <button 
                onClick={() => handleRemoveIngredient(ingredient.id)}
                className="ml-2 text-gray-500 hover:text-red-500"
              >
                Ã—
              </button>
            </div>
          ))}
          {ingredients.length === 0 && (
            <p className="text-gray-500 italic">Add ingredients to get started</p>
          )}
        </div>
        
        <h2 className="text-xl font-semibold mb-4">Dietary Preferences</h2>
        <div className="flex flex-wrap gap-3 mb-6">
          {dietaryPreferences.map((pref) => (
            <button
              key={pref.value}
              onClick={() => toggleDietaryPreference(pref.value)}
              className={`px-4 py-2 rounded-lg border ${pref.selected 
                ? 'bg-green-500 text-white border-green-500' 
                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}`}
            >
              {pref.label}
            </button>
          ))}
        </div>
        
        <button
          onClick={handleGenerateRecipe}
          disabled={isGenerating || ingredients.length === 0}
          className={`w-full py-3 rounded-lg font-medium ${isGenerating || ingredients.length === 0 
            ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
            : 'bg-green-500 hover:bg-green-600 text-white'}`}
        >
          {isGenerating ? 'Generating Recipe...' : 'Generate Recipe'}
        </button>
      </div>
      
      {recipe && (
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-2xl font-bold mb-4 text-green-600">Generated Recipe</h2>
          <p className="text-gray-600 mb-6">This is a placeholder for where the AI-generated recipe would appear.</p>
          <p className="italic text-gray-500">Note: In the actual implementation, this would display the full recipe generated by our AI based on your ingredients and preferences.</p>
        </div>
      )}
    </div>
  );
};